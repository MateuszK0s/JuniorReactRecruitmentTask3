{"version":3,"sources":["components/NavigateQuotesBar.js","components/QuoteSection.js","components/MainContainer.js","App.js","index.js"],"names":["buttonStyles","css","ButtonsBar","styled","div","RandomQuoteButton","button","PreviousQuoteButton","NavigateQuotesBar","props","getQuote","getPreviousQuote","onClick","QuoteSection","quotes","displayQuote","length","lastIndex","quote","author","Container","MainContainer","useState","setQuotes","fetch","then","response","ok","Error","status","json","data","randomIndex","Math","floor","random","catch","error","console","log","alert","filter","item","key","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAGMA,EAAeC,YAAH,oSAcZC,EAAaC,IAAOC,IAAV,kHAQVC,EAAoBF,IAAOG,OAAON,GAClCO,EAAsBJ,IAAOG,OAAON,GAgB3BQ,EAdW,SAACC,GAEzB,IAAQC,EAA+BD,EAA/BC,SAAUC,EAAqBF,EAArBE,iBAClB,OACE,eAACT,EAAD,WACE,cAACG,EAAD,CAAmBO,QAASF,EAA5B,4BAEA,cAACH,EAAD,CAAqBK,QAASD,EAA9B,oCChBSE,EAnBM,SAACJ,GAEpB,IAAQK,EAAWL,EAAXK,OAEJC,EAAe,gEAGnB,GAAID,EAAOE,OAAS,EAAG,CACrB,IAAMC,EAAYH,EAAOE,OAAS,EAClCD,EACE,gCACE,6BAAKD,EAAOG,GAAWC,QACvB,6BAAKJ,EAAOG,GAAWE,YAI7B,OAAO,8BAAMJ,KCVTK,EAAYjB,IAAOC,IAAV,wFAmDAiB,EAzCO,WAEpB,IAgBA,EAA4BC,mBAAS,IAArC,mBAAOR,EAAP,KAAeS,EAAf,KAYA,OACE,eAACH,EAAD,WACE,cAAC,EAAD,CACEV,SA/BkB,kBACtBc,MALF,yIAMKC,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAMF,EAASG,WAEtBJ,MAAK,SAACC,GAAD,OAAcA,EAASI,UAC5BL,MAAK,SAACM,GACL,IAAMC,EAAcC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpCZ,EAAU,GAAD,mBAAKT,GAAL,CAAaiB,EAAKC,SAE5BI,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,OAmB5B1B,iBAbsB,WAC1B,IAAMM,EAAYH,EAAOE,OAAS,EAC9BC,EAAY,EACduB,MAAM,oBAGRjB,EAAUT,EAAO2B,QAAO,SAACC,EAAMC,GAAP,OAAeA,IAAQ1B,SAS7C,cAAC,EAAD,CAAcH,OAAQA,QC1Cb8B,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCANC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c8b40b97.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\r\n\r\n//Styled components styles\r\nconst buttonStyles = css`\r\n  color: white;\r\n  margin-top: 5px;\r\n  font: inherit;\r\n  font-size: 24px;\r\n  border: 1px solid #8b005d;\r\n  color: white;\r\n  background-color: #8b005d;\r\n  box-shadow: 0 0 4px rgba(0, 0, 0, 0.26);\r\n  cursor: pointer;\r\n  padding: 0.3rem 1rem;\r\n  border-radius: 6px;\r\n`;\r\n\r\nconst ButtonsBar = styled.div`\r\n  width: 480px;\r\n  margin: auto;\r\n  display: flex;\r\n  justify-content: space-around;\r\n`;\r\n\r\n//Assign same styles to buttons with styled-components\r\nconst RandomQuoteButton = styled.button(buttonStyles);\r\nconst PreviousQuoteButton = styled.button(buttonStyles);\r\n\r\nconst NavigateQuotesBar = (props) => {\r\n  //Destructuring props\r\n  const { getQuote, getPreviousQuote } = props;\r\n  return (\r\n    <ButtonsBar>\r\n      <RandomQuoteButton onClick={getQuote}>Get your quote</RandomQuoteButton>\r\n\r\n      <PreviousQuoteButton onClick={getPreviousQuote}>\r\n        Get previous quote\r\n      </PreviousQuoteButton>\r\n    </ButtonsBar>\r\n  );\r\n};\r\n\r\nexport default NavigateQuotesBar;\r\n","const QuoteSection = (props) => {\r\n  //Desctructuring props\r\n  const { quotes } = props;\r\n  //Text displayed before getting a quote\r\n  let displayQuote = <h3>Click on button to get a quote</h3>;\r\n\r\n  //Update displayQuote after getting a qoute\r\n  if (quotes.length > 0) {\r\n    const lastIndex = quotes.length - 1;\r\n    displayQuote = (\r\n      <div>\r\n        <h2>{quotes[lastIndex].quote}</h2>\r\n        <h4>{quotes[lastIndex].author}</h4>\r\n      </div>\r\n    );\r\n  }\r\n  return <div>{displayQuote}</div>;\r\n};\r\n\r\nexport default QuoteSection;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport NavigateQuotesBar from \"./NavigateQuotesBar\";\r\nimport QuoteSection from \"./QuoteSection\";\r\n\r\n//Styled components styles\r\nconst Container = styled.div`\r\n  text-align: center;\r\n  width: 40%;\r\n  margin: 20px auto;\r\n`;\r\n\r\n//Link to API\r\nconst API =\r\n  \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\";\r\n\r\nconst MainContainer = () => {\r\n  //Fetch data from API and push one random qoute object to quotes state\r\n  const handleDataFetch = () =>\r\n    fetch(API)\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        }\r\n        throw Error(response.status);\r\n      })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const randomIndex = Math.floor(Math.random() * 102);\r\n        setQuotes([...quotes, data[randomIndex]]);\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n  //Initialization of react hook\r\n  const [quotes, setQuotes] = useState([]);\r\n\r\n  //Check amount of quotes and update quotes hook\r\n  const handlePreviousQuote = () => {\r\n    const lastIndex = quotes.length - 1;\r\n    if (lastIndex < 0) {\r\n      alert(\"No quotes before\");\r\n      return;\r\n    }\r\n    setQuotes(quotes.filter((item, key) => key !== lastIndex));\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <NavigateQuotesBar\r\n        getQuote={handleDataFetch}\r\n        getPreviousQuote={handlePreviousQuote}\r\n      />\r\n      <QuoteSection quotes={quotes} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MainContainer;\r\n","import MainContainer from \"./components/MainContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}